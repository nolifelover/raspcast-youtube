{
  "name": "peer-ssdp",
  "description": "Nodejs implementation of the Simple Service Discovery Protocol",
  "version": "0.0.2",
  "author": {
    "name": "Louay Bassbouss",
    "email": "louay.bassbouss@fokus.fraunhofer.de"
  },
  "contributors": [
    {
      "name": "Martin Lasak",
      "email": "martin.lasak@fokus.fraunhofer.de"
    },
    {
      "name": "Alexander Futasz",
      "email": "alexander.futasz@fokus.fraunhofer.de"
    }
  ],
  "keywords": [
    "ssdp",
    "upnp",
    "nsd",
    "network service discovery"
  ],
  "main": "index",
  "readmeFilename": "Readme.md",
  "_id": "peer-ssdp@0.0.2",
  "_from": "peer-ssdp@*",
  "readme": "peer-ssdp \n=========\n\npeer-ssdp is a simple Node.js module implementing the Simple Service Discovery Protocol SSDP as described in the\n[UPnP Device Architecture specification, Section 1](http://www.upnp.org/specs/arch/UPnP-arch-DeviceArchitecture-v1.1.pdf)\n\nSetup\n=====\n\n  * use `npm install peer-ssdp` to install the module.\n  * run example with `node node_modules/peer-ssdp/test/ssdp-test.js`\n  \nUsage\n=====\nPeer is an `EventEmitter` so you can use the common `EventEmitter` API to subscribe to specific events.\n\n```javascript\nvar ssdp = require(\"peer-ssdp\");\nvar peer = ssdp.createPeer();\nvar interval;\n/**\n * handle peer ready event. This event will be emitted after `peer.start()` is called.\n */\npeer.on(\"ready\",function(){\n\t// handle ready event\n\t// send ssdp:alive messages every 1s\n\tinterval = setInterval(function(){\n\t\tpeer.alive({\n\t\t\tST: \"upnp:rootdevice\",\n\t\t\tSERVER: \"...\",\n\t\t\tST: headers.ST,\n\t\t\tUSN: \"...\"\n\t\t});\n\t}, 1000);\n\t// shutdown peer after 10 s and send a ssdp:byebye message before\n\tsetTimeout(function(){\n\t\tclearInterval(interval);\n\t\t// Close peer. Afer peer is closed the `close` event will be emitted.\n\t\tpeer.close();\n\t}, 10000);\n});\n\n// handle SSDP NOTIFY messages. \n// param headers is JSON object containing the headers of the SSDP NOTIFY message as key-value-pair. \n// param address is the socket address of the sender\npeer.on(\"notify\",function(headers, address){\n\t// handle notify event\n});\n\n// handle SSDP M-SEARCH messages. \n// param headers is JSON object containing the headers of the SSDP M-SEARCH message as key-value-pair. \n// param address is the socket address of the sender\npeer.on(\"search\",function(headers, address){\n\t//handle search request\n\t// reply to search request \n\tpeer.reply({\n\t\tST: \"upnp:rootdevice\",\n\t\tSERVER: \"...\",\n\t\tST: headers.ST,\n\t\tUSN: \"...\"\n\t},address);\n});\n\n// handle SSDP HTTP 200 OK messages. \n// param headers is JSON object containing the headers of the SSDP HTTP 200 OK  message as key-value-pair. \n// param address is the socket address of the sender\npeer.on(\"found\",function(headers, address){\n\t// handle found event\n});\n\n// handle peer close event. This event will be emitted after `peer.close()` is called.\npeer.on(\"close\",function(){\n\t// handle close event\n});\n\n// Start peer. Afer peer is ready the `ready` event will be emitted.\npeer.start();\n``` \n\nLicense\n=======\n\nFree for non commercial use released under the GNU Lesser General Public License v3.0\n, See LICENSE file.\n\nContact us for commecial use famecontact@fokus.fraunhofer.de\n\nCopyright (c) 2013 Fraunhofer FOKUS\n"
}
